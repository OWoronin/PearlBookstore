@page "/buy"
@rendermode InteractiveAuto
@inject IHttpClientFactory clientFactory
@inject IDialogService dialogService
@inject ISnackbar Snackbar
@inject BuyItemsService buyService
@inject ILocalStorageService localStorage
@inject NavigationManager navigationManager

<PageTitle>Zakup publikację</PageTitle>
<MudText Typo="Typo.h3" Align="Align.Center" Class="m-3">Zakup publikacje</MudText>

<MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-12" Centered="true" @ref="tabs">
    <MudTabPanel Text="Wyszukaj publikację" @ref="searchTab">
        <MudGrid>
            <MudItem xs="2">
                <MudPaper Class="pa-4 d-flex justify-content-center">
                    <MudButton OnClick="OnExpandCollapseClick" ButtonType="ButtonType.Button" Color="Color.Primary" Variant="Variant.Filled">@(expanded ? "Zwiń" : "Rozwiń")</MudButton>
                </MudPaper>
            </MudItem>
            <MudItem xs="7">
                <MudTextField Clearable="true" @bind-Value="@SearchValue" AutoFocus="true" Placeholder="Tytuł lub Autor" />
            </MudItem>
            <MudItem xs="3" Style="display:flex;justify-content:center">
                <MudButton ButtonType="ButtonType.Button" Color="Color.Success" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Search" Class="m-3" OnClick="Search">Wyszukaj publikacje</MudButton>
            </MudItem>
            <MudItem xs="2">
                <MudPaper Class="pa-4">
                    <MudStack Spacing="2">
                        <MudCollapse Expanded="expanded">
                            <MudSelect Label="Autor" @bind-Value="AuthorId" Placeholder="Autor" T="int" Clearable="true" Strict="true">
                                @if(authors != null)
                                {
                                    @foreach (var type in authors)
                                    {
                                        <MudSelectItem Value="@type.Id">@type.Name @type.Surname</MudSelectItem>
                                    }
                                }
                            </MudSelect>
                            <MudDivider />
                            <MudSelect Label="Gatunek" @bind-Value="GenreId" Placeholder="Gatunek" T="int" Clearable="true" Strict="true">
                                @if(genres != null)
                                {
                                    @foreach (var type in genres)
                                    {
                                        <MudSelectItem Value="@type.Id">@type.Name</MudSelectItem>
                                    }
                                }
                            </MudSelect>
                            <MudDivider />
                            <MudNumericField @bind-Value="PriceValueMin" Label="Cena mininalna" Min="0" Max="1000" Format="F1"/>
                            <MudDivider />
                            <MudNumericField @bind-Value="PriceValueMax" Label="Cena maksymalna" Min="0" Max="1000" Format="F1" />
                            <MudDivider />
                            <MudCheckBox @bind-Value="@Hard" Label="Twarda okładka" />
                            <MudDivider />
                            <MudCheckBox @bind-Value="@Soft" Label="Miękka okładka" />
                            <MudDivider />
                            <MudCheckBox @bind-Value="@Ebook" Label="Ebook" />
                            <MudDivider />
                            <MudCheckBox @bind-Value="@AudioBook" Label="Audiobook" />
                        </MudCollapse>
                    </MudStack>
                </MudPaper>
            </MudItem>
            @*////////////////////////////////////////////////////////////////////////////////////////////////////*@
            <MudItem xs="10">
                <MudTable Items="@items" Bordered="true" SortLabel="SortBy" Height="50vh" FixedHeader="true">
                    <ColGroup>
                        <col style="width:20%"/>
                        <col style="width:20%"/>
                        <col style="width:20%"/>
                        <col style="width:20%"/>
                        <col style="width:20%"/>
                    </ColGroup>
                    <HeaderContent>
                        <MudTh>Tytuł</MudTh>
                        <MudTh>Autor</MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<ItemDto,object>(x=>x.TypeDto.Id)">Typ</MudTableSortLabel></MudTh>
                        <MudTh>Cena</MudTh>
                        <MudTh>Dodaj do zakup</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Tytuł">@context.Title</MudTd>
                        <MudTd DataLabel="Autor">@context.AuthorDto.Name @context.AuthorDto.Surname</MudTd>
                        <MudTd DataLabel="Typ">@context.TypeDto.Name</MudTd>
                        <MudTd DataLabel="Cena">@String.Format("{0:F2}", context.Price) zł</MudTd>
                        <MudTd DataLabel="Dodaj do zakup" Style="display:flex;justify-content:center;">
                            <MudButton ButtonType="ButtonType.Button" Color="Color.Success" Variant="Variant.Filled" OnClick="() => AddToPurchase(new DialogModel(){ID = context.Id, Title = context.Title, Type = context.TypeDto.Name})"  Disabled="context.Counter==0">
                                @if (context.Counter == 0)
                                {
                                    @("Niedostępny")
                                }
                                else
                                {
                                    @("Dodaj")
                                }
                            </MudButton>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudItem>
            <MudItem xs="10">

            </MudItem>
            <MudItem xs="2">
                <MudButton ButtonType="ButtonType.Button" Color="Color.Success" Variant="Variant.Filled" OnClick="()=>ChangeTab(summaryTab)">Przejdź do podsumowania</MudButton>
            </MudItem>
        </MudGrid>
    </MudTabPanel>
    @*------------------------------------------------------------------------------------------------------------*@
    <MudTabPanel Text="Podsumowanie" @ref="summaryTab">
        <MudGrid>
            <MudItem xs="12">
                <MudTable Items="@buyService.GetItemDtos()" Bordered="true" Height="60vh" FixedHeader="true">
                    <ColGroup>
                        <col style="width:20%" />
                        <col style="width:20%" />
                        <col style="width:20%" />
                        <col style="width:20%" />
                        <col style="width:20%" />
                    </ColGroup>
                    <HeaderContent>
                        <MudTh>Tytuł</MudTh>
                        <MudTh>Autor</MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<ItemDto,object>(x=>x.TypeDto.Id)">Typ</MudTableSortLabel></MudTh>
                        <MudTh>Cena</MudTh>
                        <MudTh>Usuń z zakupu</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Tytuł">@context.Title</MudTd>
                        <MudTd DataLabel="Autor">@context.AuthorDto.Name @context.AuthorDto.Surname</MudTd>
                        <MudTd DataLabel="Typ">@context.TypeDto.Name</MudTd>
                        <MudTd DataLabel="Cena">@String.Format("{0:F2}", context.Price) zł</MudTd>
                        <MudTd DataLabel="Usuń z zakupu"><MudButton ButtonType="ButtonType.Button" Color="Color.Error" Variant="Variant.Outlined" OnClick="() => RemoveFromPurchase(new DialogModel{ID = context.Id, Title = context.Title, Type = context.TypeDto.Name})">Usuń</MudButton></MudTd>
                    </RowTemplate>
                </MudTable>
            </MudItem>
            <MudItem xs="9">

            </MudItem>
            <MudItem xs="3">
                <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.FlexEnd">
                    <MudText Align="Align.Center">Cena wynosi: @PriceAll zł</MudText>
                    <MudButton ButtonType="ButtonType.Button" Color="Color.Error" Variant="Variant.Outlined" OnClick="()=>ClearBuy()">Wyczyść zakup</MudButton>
                    <MudButton ButtonType="ButtonType.Button" Color="Color.Success" Variant="Variant.Filled">Zatwierdź zakup</MudButton>
                </MudStack>
            </MudItem>
        </MudGrid>
    </MudTabPanel>
</MudTabs>

@code {
    decimal PriceAll;

    MudTabs tabs;
    MudTabPanel searchTab;
    MudTabPanel summaryTab;
    public bool Hard { get; set; }
    public bool Soft { get; set; }
    public bool Ebook { get; set; }
    public bool AudioBook { get; set; }
    public int AuthorId { get; set; }
    public int GenreId { get; set; }
    public decimal PriceValueMin { get; set; } = 0;
    public decimal PriceValueMax { get; set; } = 0;
    public string SearchValue { get; set; }
    public bool expanded = false;
    public bool firstExpand = true;
    private HttpClient httpClient;
    private List<GenreDto> genres;
    private List<AuthorDto> authors;
    private List<ItemDto> items;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        httpClient = clientFactory.CreateClient("API");
        // HttpClient client = new HttpClient();
        // client.BaseAddress = ""
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if(!(await localStorage.ContainKeyAsync("currentUser")))
            {
                Snackbar.Add("Musisz się najpierw zalogować.", Severity.Warning);
                navigationManager.NavigateTo("/login");
            }
        }
    }

    private async Task Search()
    {

        List<ItemDto> searchResponse = null;

        if(!expanded)
        {
            searchResponse = await httpClient.GetFromJsonAsync<List<ItemDto>>($"/api/search/SearchItem/{SearchValue}");
        }
        else
        {
            if(PriceValueMax < PriceValueMin)
            {
                Snackbar.Add("Cena maksymalna nie może być mniejsza niż cena minimalna", Severity.Error);
            }
            else
            {
                var request = new HttpRequestMessage(HttpMethod.Get, $"/api/search/SearchExtended");
                request.Headers.Add("phrase", SearchValue);
                request.Headers.Add("autorID", AuthorId.ToString());
                request.Headers.Add("genreID", GenreId.ToString());
                request.Headers.Add("minPrice", PriceValueMin.ToString());
                request.Headers.Add("maxPrice", PriceValueMax.ToString());
                request.Headers.Add("isHard", Hard.ToString());
                request.Headers.Add("isSoft", Soft.ToString());
                request.Headers.Add("isEbook", Ebook.ToString());
                request.Headers.Add("isAudiobook", AudioBook.ToString());
                var response = await httpClient.SendAsync(request);
                Console.WriteLine(await response.Content.ReadAsStringAsync());
                if (response.IsSuccessStatusCode)
                {
                    searchResponse = await response.Content.ReadFromJsonAsync<List<ItemDto>>();
                }
            }

        }

        if(searchResponse == null)
        {
            Snackbar.Add($"Wystąpił błąd przy wyszukiwaniu publikacji dla frazy: \"{SearchValue}\"", Severity.Error);
        }
        else
        {
            items = searchResponse;
            Snackbar.Add($"Pomyślnie wyszukano publikacje dla frazy: \"{SearchValue}\"", Severity.Success);
        }
    }

    private async Task OnExpandCollapseClick()
    {
        expanded = !expanded;
        if(firstExpand)
        {
            firstExpand = false;
            var genresResponse = await httpClient.GetFromJsonAsync<List<GenreDto>>("/api/genre/All");
            if(genresResponse == null || genresResponse.Count == 0)
            {
                expanded = !expanded;
                Snackbar.Add("Nie udało się pobrać gatunków z systemu. Skontaktuj się z administratorem.", Severity.Error);
            }
            else
            {
                genres = genresResponse;
            }

            var authorsResponse = await httpClient.GetFromJsonAsync<List<AuthorDto>>("/api/author/All");

            if(authorsResponse == null || authorsResponse.Count == 0)
            {
                expanded = !expanded;
                Snackbar.Add("Nie udało się pobrać autorów z systemu. Skontaktuj się z administratorem.", Severity.Error);
            }
            else
            {
                authors = authorsResponse;
            }
        }
    }

    async Task AddToPurchase(DialogModel model)
    {
        var parameters = new DialogParameters<AddDialog> { { x => x.Model, model } };
        var dialog = await dialogService.ShowAsync<AddDialog>("Dodaj do zakupu", parameters);

        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            var data = (AddDialogReturnModel)result.Data;

            var request = items.Where(i => i.Id == data.ID).Select(i => new AddItemToBucketRequest
                {
                    ItemId = i.Id,
                    TypeId = i.TypeDto.Id,
                    Price = i.Price,
                    EmployeeId = 1
                }).First();

            var response = await httpClient.PostAsJsonAsync<AddItemToBucketRequest>("/api/purchase/AddItemToBucket", request);

            if(response.IsSuccessStatusCode)
            {
                var responseData = await response.Content.ReadFromJsonAsync<DefaultResponse>();
                if (responseData != null)
                {
                    if (responseData.IsSuccess)
                    {
                        buyService.Add(items.Where(i => i.Id == data.ID).First());

                        Snackbar.Add($"Pomyślnie dodano {data.Title} do zakupu.", Severity.Success);
                    }
                    else
                    {
                        Snackbar.Add(responseData.Message, Severity.Error);
                    }
                }
                else
                {
                    Snackbar.Add($"Wystąpił błąd przy dodawaniu {data.Title} do zakupu. Skontaktuj się z administratorem.", Severity.Error);
                }

            }
            else
            {
                Snackbar.Add($"Wystąpił błąd przy dodawaniu {data.Title} do zakupu. Skontaktuj się z administratorem.", Severity.Error);
            }



            if (data.ChangeTab)
            {
                ChangeTab(summaryTab);
            }
        }
    }

    async Task RemoveFromPurchase(DialogModel model)
    {
        var parameters = new DialogParameters<RemoveDialog> { { x => x.Model, model }, { x=>x.Content, "zakupu"} };
        var dialog = await dialogService.ShowAsync<RemoveDialog>("Usuń z zakupu", parameters);

        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            var data = (RemoveDialogReturnModel)result.Data;
            string title = data.Title;

            if (data.Remove)
            {
                var response = await httpClient.PostAsync($"/api/purchase/RemoveItemFromBucket/{data.ID}",null);

                if(response.IsSuccessStatusCode)
                {
                    var responseValue = await response.Content.ReadFromJsonAsync<DefaultResponse>();

                    if(responseValue != null)
                    {
                        if (responseValue.IsSuccess)
                        {
                            buyService.Remove(data.ID);

                            Snackbar.Add($"Pomyślnie usunięto {title} z zakupu.", Severity.Success);
                        }
                        else
                        {
                            Snackbar.Add($"Nie udało się usunąć {data.Title} z zakupu. Skontaktuj się z administratorem.", Severity.Error);
                        }
                    }
                    else
                    {
                        Snackbar.Add($"Wystąpił błąd przy usuwaniu {data.Title} z zakupu. Skontaktuj się z administratorem.", Severity.Error);
                    }

                }
                else
                {
                    Snackbar.Add($"Wystąpił błąd przy usuwaniu {data.Title} z zakupu. Skontaktuj się z administratorem.", Severity.Error);
                }

            }
        }
    }

    async Task ClearBuy()
    {
        var parameters = new DialogParameters<ClearDialog> { { x => x.Content, "zakupu" } };
        var dialog = await dialogService.ShowAsync<ClearDialog>("Wyczyść zakup", parameters);

        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            if ((bool)result.Data)
            {
                await httpClient.PostAsJsonAsync<int>("/api/purchase/ClearBucket", 0);

                buyService.Clear();

                Snackbar.Add("Pomyślnie wyczyszczono koszyk zakupu.", Severity.Success);
            }
        }
    }

    async Task AcceptBuy()
    {
        var response = await httpClient.GetFromJsonAsync<DefaultResponse>("/api/purchase/Accept");
        if(response != null)
        {
            if(response.IsSuccess)
            {
                buyService.Clear();
            }
        }
    }

    void ChangeTab(MudTabPanel panel)
    {
        tabs.ActivatePanel(panel);
    }
}
