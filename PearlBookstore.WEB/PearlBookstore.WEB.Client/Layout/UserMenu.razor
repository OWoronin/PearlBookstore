@rendermode InteractiveWebAssembly
@inject ILocalStorageService localStorage
@inject IHttpClientFactory clientFactory
@inject NavigationManager navigationManager
@inject EventAggregator EventAggregator
@inject NavigationManager navigationManager
@if (IsLogged)
{
    <MudAvatar Color="Color.Primary">@Initials</MudAvatar>
    <MudText Class="m-2">@Name @Surname - @RoleName</MudText>
    <MudButton Color="Color.Secondary" Variant="Variant.Filled" Class="m-2" @onclick="Logout">Wyloguj</MudButton>
}
else
{
    <MudButton Color="Color.Primary" Variant="Variant.Filled" Class="m-2" @onclick="Login">Zaloguj</MudButton>
}

@code {
    public string Initials { get; set; }
    public string Name { get; set; }
    public string Surname { get; set; }
    public string RoleName { get; set; }
    public bool IsLogged { get; set; } = false;

    protected override void OnInitialized()
    {
        base.OnInitializedAsync();
        EventAggregator.Subscribe("Logged", Rerender);
        EventAggregator.Subscribe("Logout", Rerender);
    }

    private async Task Rerender()
    {
        if (await localStorage.ContainKeyAsync("currentUser"))
        {
            var user = await localStorage.GetItemAsync<CurrentUser>("currentUser");
            Name = user.Name;
            Surname = user.Surname;
            Initials = user.Initials;
            RoleName = user.RoleName;
            IsLogged = true;
        }
        else
        {
            IsLogged = false;
        }
        await InvokeAsync(StateHasChanged);
        // StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Rerender();
        }
    }

    private void Login()
    {
        navigationManager.NavigateTo("/login");
    }

    private async Task Logout()
    {
        var httpClient = clientFactory.CreateClient("API");
        var response = httpClient.PostAsync("/api/user/Logout", null);
        if (await localStorage.ContainKeyAsync("currentUser"))
        {
            await localStorage.RemoveItemAsync("currentUser");
        }
        navigationManager.NavigateTo("/");
        await Rerender();
    }
}