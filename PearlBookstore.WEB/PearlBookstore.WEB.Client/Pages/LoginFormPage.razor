@page "/login"
@rendermode InteractiveWebAssembly
@inject IHttpClientFactory clientFactory
@inject NavigationManager navigationManager
@inject EventAggregator EventAggregator
@inject ISnackbar Snackbar
@inject CurrentUser currentUser

<PageTitle>Panel logowania</PageTitle>
<MudText Typo="Typo.h3" Align="Align.Center" Class="m-3">Panel logowania</MudText>
<MudContainer MaxWidth="MaxWidth.Small">
    <MudTextField @bind-Value="request.Login" Label="Login" Placeholder="Login" Class="m-2"/>
    <MudTextField @bind-Value="request.Password" Label="Hasło" InputType="InputType.Password" Class="m-2" />
    <MudButton Color="Color.Primary" Variant="Variant.Filled" Class="m-2" OnClick="OnSubmit">Zaloguj</MudButton>
</MudContainer>

@code {
    LoginRequest request = new();

    private async Task OnSubmit()
    {
        if (string.IsNullOrEmpty(request.Login))
        {
            Snackbar.Add($"Login jest wymagany", Severity.Error);
        }
        else if (string.IsNullOrEmpty(request.Password))
        {
            Snackbar.Add($"Hasło jest wymagane", Severity.Error);
        }
        else
        {
            var httpClient = clientFactory.CreateClient("API");
            var response = await httpClient.PostAsJsonAsync("/api/user/Login", request);
            if (response.IsSuccessStatusCode)
            {
                var responseData = await response.Content.ReadFromJsonAsync<LoginResponse>();
                if (responseData != null)
                {
                    if (responseData.Id != -1)
                    {
                        var currentState = new UserState
                            {
                                ID = responseData.Id,
                                Name = responseData.Name,
                                Surname = responseData.Surname,
                                IsLogged = true,
                                RoleName = responseData.RoleName,
                                Initials = $"{responseData.Name[0].ToString().ToUpper()}{responseData.Surname[0].ToString().ToUpper()}",
                                RoleID = responseData.RoleId,
                            };
                        await currentUser.SetUserStateAsync(currentState);

                        Snackbar.Add($"Pomyślnie zalogowano jako: {responseData.Name} {responseData.Surname}", Severity.Success);
                        EventAggregator.Publish("Logged");
                        navigationManager.NavigateTo("/");
                    }
                }
            }
            else
            {
                Snackbar.Add($"Błąd logowania", Severity.Error);
            }
        }
       
    }

}
