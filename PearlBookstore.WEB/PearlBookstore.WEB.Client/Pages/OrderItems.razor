@page "/order"
@page "/order/{id:int}/{type:int}"
@using System.ComponentModel.DataAnnotations
@rendermode InteractiveAuto
@inject IHttpClientFactory clientFactory
@inject IDialogService dialogService
@inject ISnackbar Snackbar
@inject OrderItemsService orderService
@inject NavigationManager navigationManager
@inject CurrentUserService currentUserService

<PageTitle>Zamów publikacje</PageTitle>
<MudText Typo="Typo.h3" Align="Align.Center" Class="m-3">Zamów publikacje</MudText>
<MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-12" Centered="true" @ref="tabs">
    <MudTabPanel Text="Wyszukaj publikację" @ref="searchTab">
        <MudGrid>
            <MudItem xs="10">
                <MudTextField Clearable="true" @bind-Value="@SearchValue" AutoFocus="true" Placeholder="Tytuł lub Autor" />
            </MudItem>
            <MudItem xs="2">
                <MudButton ButtonType="ButtonType.Submit" Color="Color.Success" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Search" Class="m-3" OnClick="Search">Wyszukaj publikację</MudButton>
            </MudItem>

            @*--------------------------------------------------------------------------------------------*@
            <MudItem xs="12">
                <MudTable Items="@items" Bordered="true" Height="45vh" FixedHeader="true">
                    <ColGroup>
                        <col style="width:20%" />
                        <col style="width:20%" />
                        <col style="width:20%" />
                        <col style="width:20%" />
                        <col style="width:20%" />
                    </ColGroup>
                    <HeaderContent>
                        <MudTh Style="font-weight:bold;">Tytuł</MudTh>
                        <MudTh Style="font-weight:bold;">Autor</MudTh>
                        <MudTh Style="font-weight:bold;">Typ</MudTh>
                        <MudTh Style="font-weight:bold;">Cena</MudTh>
                        <MudTh Style="font-weight:bold;">Dodaj do zamówienia</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Tytuł">@context.Title</MudTd>
                        <MudTd DataLabel="Autor">@context.AuthorDto.Name @context.AuthorDto.Surname</MudTd>
                        <MudTd DataLabel="Typ">@context.TypeDto.Name</MudTd>
                        <MudTd DataLabel="Cena">@String.Format("{0:F2}", context.Price) zł</MudTd>
                        <MudTd DataLabel="Dodaj do zwrotu">
                            <MudButton ButtonType="ButtonType.Button" Color="Color.Success" Variant="Variant.Filled" OnClick="() => AddToOrder(new DialogModel(){ID = context.Id, Title = context.Title, TypeName = context.TypeDto.Name, TypeID = context.TypeDto.Id})" Disabled="@(context.Counter!=0)">
                                @if (context.Counter == 0)
                                {
                                    @("Dodaj")
                                }
                                else
                                {
                                    @("Dostępna")
                                }
                            </MudButton>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudItem>
            <MudItem xs="8">

            </MudItem>
            <MudItem xs="4">
                <MudButton ButtonType="ButtonType.Button" Color="Color.Primary" Variant="Variant.Filled" OnClick="()=>ChangeTab(dataTab)">Przejdź do danych klienta</MudButton>
                <MudButton ButtonType="ButtonType.Button" Color="Color.Success" Variant="Variant.Filled" OnClick="()=>ChangeTab(summaryTab)" >Przejdź do podsumowania</MudButton>
            </MudItem>
        </MudGrid>
    </MudTabPanel>
    @*///////////////////////////////////////////////////////////////////////////////////////////////////////////////*@
    <MudTabPanel Text="Dane klienta" @ref="dataTab">
        <MudGrid>
            <MudItem xs="4">

            </MudItem>
            <MudItem xs="4">
                <MudForm @ref="form" @bind-IsValid="@success">
                    <MudText Typo="Typo.h4" Align="Align.Center" Class="m-2">Podaj dane</MudText>
                    <MudTextField @bind-Value="ClientRequest.Name" Placeholder="Imię" Label="Imię" InputType="InputType.Text" T="string" Required="true" RequiredError="Imię klienta jest wymagane" Clearable="true" AutoFocus="true" InputMode="InputMode.text"/>
                    <MudTextField @bind-Value="@ClientRequest.Surname" Placeholder="Nazwisko" Label="Nazwisko" InputType="InputType.Text" T="string" Required="true" RequiredError="Nazwisko klienta jest wymagane" Clearable="true" />
                    <MudTextField @bind-Value="@ClientRequest.Email" Placeholder="Adres email" Label="Adres email" InputType="InputType.Email" InputMode="InputMode.email" T="string" Required="true" RequiredError="Adres email jest wymagany"
                                  Validation="@(new EmailAddressAttribute() {ErrorMessage = "Adres email jest niepoprawny"})" Clearable="true"/>
                    <MudTextField @bind-Value="@ClientRequest.Phone" Placeholder="Numer telefonu" Label="Numer telefonu" InputType="InputType.Telephone" InputMode="InputMode.tel" Validation="@(new PhoneAttribute() {ErrorMessage="Numer telefonu jest niepoprawny"})" T="string" Required="true" RequiredError="Numer telefonu jest wymagany" Clearable="true" />
                </MudForm>
            </MudItem>
            <MudItem xs="4">

            </MudItem>
            @*-----------------------------------------------------------------------------------------------------------*@
            <MudItem xs="8">

            </MudItem>
            <MudItem xs="4">
                <MudButton ButtonType="ButtonType.Button" Color="Color.Primary" Variant="Variant.Filled" OnClick="()=>ChangeTab(searchTab)">Wróć do wyszukiwania</MudButton>
                <MudButton ButtonType="ButtonType.Button" Color="Color.Success" Variant="Variant.Filled" OnClick="()=>ChangeTab(summaryTab)" Disabled="@(!success)">Przejdź do podsumowania</MudButton>
            </MudItem>
        </MudGrid>
    </MudTabPanel>
    @*///////////////////////////////////////////////////////////////////////////////////////////////////////////////*@
    <MudTabPanel Text="Podsumowanie" @ref="summaryTab">
        <MudGrid>
            <MudItem xs="9">
                <MudTable Items="@orderService.GetItemDtos()" Bordered="true" CommitEditTooltip="Zmień ilość" Height="55vh" FixedHeader="true" RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues"
                          RowEditCommit="ItemHasBeenCommitted" CanCancelEdit="true" EditTrigger="TableEditTrigger.EditButton" CancelEditTooltip="Anuluj">
                    <ColGroup>
                        <col style="width:16%" />
                        <col style="width:16%" />
                        <col style="width:16%" />
                        <col style="width:16%" />
                        <col style="width:16%" />
                        <col style="width:16%" />
                    </ColGroup>
                    <HeaderContent>
                        <MudTh Style="font-weight:bold;">Tytuł</MudTh>
                        <MudTh Style="font-weight:bold;">Autor</MudTh>
                        <MudTh Style="font-weight:bold;">Typ</MudTh>
                        <MudTh Style="font-weight:bold;">Cena</MudTh>
                        <MudTh Style="font-weight:bold;">Ilość w zamówieniu</MudTh>
                        <MudTh Style="font-weight:bold;">Usuń z zamówienia</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Tytuł">@context.Title</MudTd>
                        <MudTd DataLabel="Autor">@context.AuthorDto.Name @context.AuthorDto.Surname</MudTd>
                        <MudTd DataLabel="Typ">@context.TypeDto.Name</MudTd>
                        <MudTd DataLabel="Cena">@String.Format("{0:F2}", context.Price) zł</MudTd>
                        <MudTd DataLabel="Ilość w zamówieniu">@context.ActionCounter</MudTd>
                        <MudTd DataLabel="Usuń ze zwrotu"><MudButton ButtonType="ButtonType.Button" Color="Color.Error" Variant="Variant.Outlined" OnClick="() => RemoveFromOrder(new DialogModel(){ID = context.Id, Title = context.Title, TypeName = context.TypeDto.Name, TypeID = context.TypeDto.Id})">Usuń</MudButton></MudTd>
                    </RowTemplate>
                    <RowEditingTemplate>
                        <MudTd DataLabel="Tytuł">@context.Title</MudTd>
                        <MudTd DataLabel="Autor">@context.AuthorDto.Name @context.AuthorDto.Surname</MudTd>
                        <MudTd DataLabel="Typ">@context.TypeDto.Name</MudTd>
                        <MudTd DataLabel="Cena">@String.Format("{0:F2}", context.Price) zł</MudTd>
                        <MudTd DataLabel="Ilość w zamówieniu">
                            <MudStack Row="true" AlignItems="AlignItems.Baseline">
                                <MudNumericField @bind-Value="@context.ActionCounter" Required Min="1" T="int" />
                            </MudStack>
                        </MudTd>
                        <MudTd DataLabel="Usuń ze zwrotu"><MudButton ButtonType="ButtonType.Button" Color="Color.Error" Variant="Variant.Outlined">Usuń</MudButton></MudTd>
                    </RowEditingTemplate>
                    <EditButtonContent Context="button">
                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Class="pa-0" OnClick="@button.ButtonAction" Disabled="@button.ButtonDisabled" />
                    </EditButtonContent>
                </MudTable>
            </MudItem>

            <MudItem xs="3">
                <MudText Typo="Typo.h4">Dane do zamówienia</MudText>
                <MudText><span style="font-weight:bold;">Imię:</span> @ClientRequest.Name</MudText>
                <MudText><span style="font-weight:bold;">Nazwisko:</span> @ClientRequest.Surname</MudText>
                <MudText><span style="font-weight:bold;">Email:</span> @ClientRequest.Email</MudText>
                <MudText><span style="font-weight:bold;">Nr tel:</span> @ClientRequest.Phone</MudText>
            </MudItem>

            <MudItem xs="6">

            </MudItem>
            <MudItem xs="6">
                <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.FlexEnd">
                    <MudButton ButtonType="ButtonType.Button" Color="Color.Default" Variant="Variant.Filled" OnClick="()=>ChangeTab(searchTab)">Wróć do wyszukiwania</MudButton>
                    <MudButton ButtonType="ButtonType.Button" Color="Color.Primary" Variant="Variant.Filled" OnClick="()=>ChangeTab(dataTab)">Wróć do danych klienta</MudButton>
                    <MudText Align="Align.Center">Cena wynosi: @String.Format("{0:F2}", @PriceAll)zł</MudText>
                    <MudButton ButtonType="ButtonType.Button" Color="Color.Error" Variant="Variant.Outlined" OnClick="()=>ClearOrder()">Wyczyść zamówienie</MudButton>
                    <MudButton ButtonType="ButtonType.Button" Color="Color.Success" Variant="Variant.Filled" Disabled="@(!success)">Zatwierdź zamówienie</MudButton>
                </MudStack>
            </MudItem>
        </MudGrid>
    </MudTabPanel>
</MudTabs>

@code {
    MudTabs tabs;
    MudTabPanel searchTab;
    MudTabPanel dataTab;
    MudTabPanel summaryTab;
    decimal PriceAll;
    private List<ItemDto> items = [];
    private int EmployeeID;
    private HttpClient httpClient;
    public string SearchValue { get; set; }
    public ClientInOrderRequest ClientRequest { get; set; } = new();
    public IMask emailMask = RegexMask.Email();
    MudForm form;
    bool success = false;

    private MudTextField<string> foo;

    [Parameter] public int id { get; set; }
    [Parameter] public int type { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if(httpClient == null)
        {
            httpClient = clientFactory.CreateClient("API");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (!(await currentUserService.IsLoggedUser()))
            {
                Snackbar.Add("Musisz się najpierw zalogować.", Severity.Warning);
                navigationManager.NavigateTo("/login");
            }
            else
            {
                var user = await currentUserService.GetCurrentUser();
                EmployeeID = user.ID;
                if (id > 0 && type > 0)
                {
                    if (httpClient == null)
                    {
                        httpClient = clientFactory.CreateClient("API");
                    }

                    var response = await httpClient.GetFromJsonAsync<ItemDto>($"/api/search/SearchToOrder/{id}/{type}");
                    if (response != null)
                    {
                        AddItemToBucketRequest bucketRequest = new()
                            {
                                ActionCounter = 1,
                                TypeId = response.TypeDto.Id,
                                ItemId = response.Id,
                                Price = response.Price,
                                EmployeeId = EmployeeID
                            };

                        var addResponse = await httpClient.PostAsJsonAsync<AddItemToBucketRequest>("/api/order/AddToOrder", bucketRequest);
                        if (addResponse.IsSuccessStatusCode)
                        {
                            var responseData = await addResponse.Content.ReadFromJsonAsync<DefaultResponse>();
                            if (responseData != null)
                            {
                                if (responseData.IsSuccess)
                                {
                                    var priceResponse = await httpClient.GetFromJsonAsync<PriceOfBucketReponse>("/api/order/PriceOfAllInBucket");

                                    if (priceResponse != null)
                                    {
                                        if (priceResponse.IsSuccess)
                                        {
                                            PriceAll = priceResponse.Price;
                                            response.ActionCounter = 1;
                                            orderService.Add(response);
                                            Snackbar.Add($"Pomyślnie dodano {response.Title} do zamówienia.", Severity.Success);
                                        }
                                        else
                                        {
                                            Snackbar.Add($"{priceResponse.Message}", Severity.Error);
                                        }
                                    }
                                    else
                                    {
                                        Snackbar.Add($"Wystąpił błąd przy podsumowaniu ceny koszyka. Skontaktuj się z administratorem.", Severity.Error);
                                    }
                                }
                                else
                                {
                                    Snackbar.Add(responseData.Message, Severity.Error);
                                }
                            }
                            else
                            {
                                Snackbar.Add($"Wystąpił błąd przy dodawaniu {response.Title} do zamówienia. Skontaktuj się z administratorem.", Severity.Error);
                            }

                        }
                        else
                        {
                            Snackbar.Add($"Wystąpił błąd przy dodawaniu {response.Title} do zamówienia. Skontaktuj się z administratorem.", Severity.Error);
                        }
                    }
                    else
                    {
                        Snackbar.Add($"Nie udało się znaleźć publikacji. Skontaktuj się z administratorem.", Severity.Error);
                    }

                }
            }
        }
    }

    private async Task Search()
    {

        var searchResponse = await httpClient.GetFromJsonAsync<List<ItemDto>>($"/api/search/SearchItem/{SearchValue}");

        if (searchResponse == null)
        {
            Snackbar.Add($"Wystąpił błąd przy wyszukiwaniu publikacji dla frazy: \"{SearchValue}\"", Severity.Error);
        }
        else
        {
            items = searchResponse;
            if (searchResponse.Count == 0)
            {
                Snackbar.Add("Nie znaleziono publikacji dla frazy: \"{SearchValue}\"", Severity.Warning);
            }
            else
            {
                Snackbar.Add($"Pomyślnie wyszukano publikacje dla frazy: \"{SearchValue}\"", Severity.Success);
            }
        }
    }

    async Task AddToOrder(DialogModel model)
    {
        var parameters = new DialogParameters<AddDialog> { { x => x.Model, model } };
        var dialog = await dialogService.ShowAsync<AddDialog>("Dodaj do zamówienia", parameters);

        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            var data = (AddDialogReturnModel)result.Data;

            var request = items.Where(i => i.Id == data.ID && i.TypeDto.Id == data.TypeID).Select(i => new AddItemToBucketRequest
                {
                    ItemId = i.Id,
                    TypeId = i.TypeDto.Id,
                    Price = i.Price,
                    EmployeeId = EmployeeID,
                    ActionCounter = 1
                }).First();

            var response = await httpClient.PostAsJsonAsync<AddItemToBucketRequest>("/api/order/AddToOrder", request);

            if (response.IsSuccessStatusCode)
            {
                var responseData = await response.Content.ReadFromJsonAsync<DefaultResponse>();
                if (responseData != null)
                {
                    if (responseData.IsSuccess)
                    {
                        var priceResponse = await httpClient.GetFromJsonAsync<PriceOfBucketReponse>("/api/order/PriceOfAllInBucket");

                        if (priceResponse != null)
                        {
                            if (priceResponse.IsSuccess)
                            {
                                PriceAll = priceResponse.Price;
                                var itemToAdd = items.Where(i => i.Id == data.ID && i.TypeDto.Id == data.TypeID).First();
                                itemToAdd.ActionCounter = 1;
                                orderService.Add(itemToAdd);
                                Snackbar.Add($"Pomyślnie dodano {data.Title} do zamówienia.", Severity.Success);
                            }
                            else
                            {
                                Snackbar.Add($"{priceResponse.Message}", Severity.Error);
                            }
                        }
                        else
                        {
                            Snackbar.Add($"Wystąpił błąd przy podsumowaniu ceny koszyka. Skontaktuj się z administratorem.", Severity.Error);
                        }
                    }
                    else
                    {
                        Snackbar.Add(responseData.Message, Severity.Error);
                    }
                }
                else
                {
                    Snackbar.Add($"Wystąpił błąd przy dodawaniu {data.Title} do zamówienia. Skontaktuj się z administratorem.", Severity.Error);
                }

            }
            else
            {
                Snackbar.Add($"Wystąpił błąd przy dodawaniu {data.Title} do zamówienia. Skontaktuj się z administratorem.", Severity.Error);
            }

            if (data.ChangeTab)
            {
                ChangeTab(summaryTab);
            }
        }
    }

    async Task RemoveFromOrder(DialogModel model)
    {
        var parameters = new DialogParameters<RemoveDialog> { { x => x.Model, model }, { x => x.Content, "zamówienia" } };
        var dialog = await dialogService.ShowAsync<RemoveDialog>("Usuń z zamówienia", parameters);

        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            var data = (RemoveDialogReturnModel)result.Data;
            string title = data.Title;

            if (data.Remove)
            {
                RemoveFromBucketRequest request = new()
                    {
                        ItemId = data.ID,
                        TypeId = data.TypeID
                    };
                var response = await httpClient.PostAsJsonAsync<RemoveFromBucketRequest>("/api/order/RemoveFromOrder", request);

                if (response.IsSuccessStatusCode)
                {
                    var responseValue = await response.Content.ReadFromJsonAsync<DefaultResponse>();

                    if (responseValue != null)
                    {
                        if (responseValue.IsSuccess)
                        {
                            var priceResponse = await httpClient.GetFromJsonAsync<PriceOfBucketReponse>("/api/order/PriceOfAllInBucket");

                            if (priceResponse != null)
                            {
                                if (priceResponse.IsSuccess)
                                {
                                    PriceAll = priceResponse.Price;
                                    orderService.Remove(data.ID, data.TypeID);
                                    Snackbar.Add($"Pomyślnie usunięto {title} z zamówienia.", Severity.Success);
                                }
                                else
                                {
                                    Snackbar.Add($"{priceResponse.Message}", Severity.Error);
                                }
                            }
                            else
                            {
                                Snackbar.Add($"Wystąpił błąd przy podsumowaniu ceny koszyka. Skontaktuj się z administratorem.", Severity.Error);
                            }

                        }
                        else
                        {
                            Snackbar.Add($"{responseValue.Message}", Severity.Error);
                        }
                    }
                    else
                    {
                        Snackbar.Add($"Wystąpił błąd przy usuwaniu {data.Title} z zamówienia. Skontaktuj się z administratorem.", Severity.Error);
                    }

                }
                else
                {
                    Snackbar.Add($"Wystąpił błąd przy usuwaniu {data.Title} z zamówienia. Skontaktuj się z administratorem.", Severity.Error);
                }

            }
        }
    }

    async Task ClearOrder()
    {
        var parameters = new DialogParameters<ClearDialog> { { x => x.Content, "zamówienia" } };
        var dialog = await dialogService.ShowAsync<ClearDialog>("Wyczyść zamówienia", parameters);

        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            if ((bool)result.Data)
            {
                await httpClient.PostAsync("/api/order/ClearBucket", null);

                PriceAll = 0;

                orderService.Clear();

                Snackbar.Add("Pomyślnie wyczyszczono koszyk zamówienia.", Severity.Success);
            }
        }
    }

    async Task AcceptBuy()
    {
        var response = await httpClient.GetFromJsonAsync<AcceptResponse>("/api/order/AcceptOrder");
        if (response != null)
        {
            if (response.IsSuccess)
            {
                Snackbar.Add("Pomyślnie dokonano zamówienia.", Severity.Success);
                orderService.Clear();
                PriceAll = 0;
                items.Clear();
                SearchValue = string.Empty;
                var parameters = new DialogParameters<OrderEvidenceDialog> { { x => x.Evidence, response.Evidence }, { x => x.Date, response.Date }, { x => x.Price, response.Price } };
                var dialog = await dialogService.ShowAsync<OrderEvidenceDialog>("Potwierdzenie zamówienia",parameters, new DialogOptions
                    {
                        CloseButton = true,
                        Position = DialogPosition.Center
                    });
            }
            else
            {
                Snackbar.Add($"{response.Message}", Severity.Error);
            }
        }
        else
        {
            Snackbar.Add("Nie udało się zaakceptować zakupu. Skontatkuj się z administratorem.", Severity.Error);
        }
        

    }

    void ChangeTab(MudTabPanel panel)
    {
        tabs.ActivatePanel(panel);
    }

    private ItemDto objectBeforeEdit;

    private void BackupItem(object data)
    {
        objectBeforeEdit = new()
            {
                Id = ((ItemDto)data).Id,
                Title = ((ItemDto)data).Title,
                AuthorDto = ((ItemDto)data).AuthorDto,
                Counter = ((ItemDto)data).Counter,
                Description = ((ItemDto)data).Description,
                Price = ((ItemDto)data).Price,
                YearPublication = ((ItemDto)data).YearPublication,
                GenresDtos = ((ItemDto)data).GenresDtos,
                TypeDto = ((ItemDto)data).TypeDto,
                ActionCounter = ((ItemDto)data).ActionCounter
            };
    }

    private void ResetItemToOriginalValues(object data)
    {
        ((ItemDto)data).Id = objectBeforeEdit.Id;
        ((ItemDto)data).Title = objectBeforeEdit.Title;
        ((ItemDto)data).AuthorDto = objectBeforeEdit.AuthorDto;
        ((ItemDto)data).Counter = objectBeforeEdit.Counter;
        ((ItemDto)data).Description = objectBeforeEdit.Description;
        ((ItemDto)data).Price = objectBeforeEdit.Price;
        ((ItemDto)data).YearPublication = objectBeforeEdit.YearPublication;
        ((ItemDto)data).GenresDtos = objectBeforeEdit.GenresDtos;
        ((ItemDto)data).TypeDto = objectBeforeEdit.TypeDto;
        ((ItemDto)data).ActionCounter = objectBeforeEdit.ActionCounter;
    }

    private void ItemHasBeenCommitted(object element)
    {
        InvokeAsync(() => ChangeCount(element));
    }

    async Task ChangeCount(object element)
    {
        var request = new ModifyCountOfItemInBucketRequest
            {
                ItemId = ((ItemDto)element).Id,
                TypeId = ((ItemDto)element).TypeDto.Id,
                ActionCounter = ((ItemDto)element).ActionCounter
            };
        var response = await httpClient.PostAsJsonAsync<ModifyCountOfItemInBucketRequest>("/api/order/ModifyCount", request);
        if (response.IsSuccessStatusCode)
        {
            var responseData = await response.Content.ReadFromJsonAsync<DefaultResponse>();
            if (responseData != null)
            {
                if (responseData.IsSuccess)
                {
                    var priceResponse = await httpClient.GetFromJsonAsync<PriceOfBucketReponse>("/api/order/PriceOfAllInBucket");

                    if (priceResponse != null)
                    {
                        if (priceResponse.IsSuccess)
                        {
                            PriceAll = priceResponse.Price;
                            StateHasChanged();
                            Snackbar.Add($"Pomyślnie ilość przedmiotu: {((ItemDto)element).Title}, na: {((ItemDto)element).ActionCounter}");
                        }
                        else
                        {
                            Snackbar.Add($"{priceResponse.Message}", Severity.Error);
                        }
                    }
                    else
                    {
                        Snackbar.Add($"Wystąpił błąd przy podsumowaniu ceny koszyka. Skontaktuj się z administratorem.", Severity.Error);
                    }

                }
                else
                {
                    Snackbar.Add($"{responseData.Message}", Severity.Error);
                    ResetItemToOriginalValues(element);
                }
            }
            else
            {
                ResetItemToOriginalValues(element);
                Snackbar.Add("Wystąpił błąd przy zmianie ilości przedmiotów w koszyku zamówienia. Skontaktuj się z administratorem.", Severity.Error);
            }
        }
        else
        {
            ResetItemToOriginalValues(element);
            Snackbar.Add("Wystąpił błąd przy zmianie ilości przedmiotów w koszyku zamówienia. Skontaktuj się z administratorem.", Severity.Error);
        }
    }

}
